
Egzamin z programowania III st Konrad Zbylut


Zadanie1


import java.util.Scanner;

public class Zadanie1 {

    public static void main(String[] args) {
        oblicz();
    }

    public static void oblicz() {
        Scanner in = new Scanner(System.in);

        try {
            System.out.print("Proszę podać długość krawędzi:");
            int a = in.nextInt();
            System.out.print("\nProszę podać wysokość: ");
            int h = in.nextInt();

            int pb = 4 * a * h;
            int v = a * a * h;

            System.out.println("Pole boczne: " + pb);
            System.out.println("Objętość: " + v);

        } catch (Exception ex) {
            System.out.println("Błędne dane, spróbuj ponownie");
            oblicz();
        }
    }
}




Zadanie 2


import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Zadanie2 {

    public static void main(String[] args) {
        zad2();
    }

    public static void zad2() {
        File file = new File("wejsciezadanie2.txt");
        List<Integer> list = new ArrayList<>();
        try {
            Scanner in = new Scanner(file);
            while (in.hasNextLine()) {
                list.add(in.nextInt());
            }

        } catch (Exception ex) {
            System.out.println("Błędne dane w pliku wejścia lub nie znaleziono pliku wejscie.txt");
        }

        for (int i = 0; i < list.size() - 1; i++) {
            for (int j = 0; j < list.size() - i - 1; j++)

                if (list.get(j) > list.get(j + 1)) {
                    int temp = list.get(j);
                    list.set(j, list.get(j + 1));
                    list.set(j + 1, temp);
                }
        }

        try {
            FileWriter fileWriter = new FileWriter("wyjsciezadanie2.txt");
            for (int i = 0; i < list.size(); i++) {
                fileWriter.write(list.get(i) + "\n");
            }
            fileWriter.close();

        } catch (Exception ex) {
            System.out.println("Błąd");
        }

        System.out.println("Zapisano odpowiedz do pliku wyjsciezadanie2.txt");
    }
}



Zadanie 3

import java.awt.*;
import javax.swing.*;

public class Zadanie3 {

    public static void main(String[] args) {
        JFrame frame = new JFrame();
        frame.add(new img());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300,300);
        frame.setResizable(false);
        frame.setVisible(true);
    }


    static class img extends JPanel {
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(Color.yellow);
            g.fillRect(0, 0, 300, 300);
            g.setColor(Color.black);
            g.drawRect(30,30,200,200);
            g.drawLine(30,30,230,230);
            g.drawLine(230,30,30,230);
        }
    }
}



Zadanie 4

import java.util.Arrays;

public class Zadanie4 {

    public static void main(String[] args) {
        Ksiazka[] ksiazki = new Ksiazka[3];

        ksiazki[0] = new Ksiazka("Miś uszatek", "Adam krzak", 1989);
        ksiazki[1] = new Ksiazka("świnka peppa", "Marcin Brzechw", 1999);
        ksiazki[2] = new Ksiazka("Kubuś puchatek", "Izabella Goal", 2000);

        Arrays.sort(ksiazki);

        for (Ksiazka ksiazka: ksiazki) {
            System.out.println(ksiazka.toString());
        }
    }

    static class Ksiazka implements Comparable<Ksiazka>{
        private String tytul;
        private String autor;
        private int rokWydania;

        public Ksiazka(String tytul, String autor, int rokWydania) {
            this.tytul = tytul;
            this.autor = autor;
            this.rokWydania = rokWydania;
        }

        public String getTytul() {
            return tytul;
        }

        @Override
        public int compareTo(Ksiazka o) {
            return this.getTytul().compareTo(o.getTytul());
        }

        @Override
        public String toString() {
            return "Ksiazka{" +
                    "tytul='" + tytul + '\'' +
                    ", autor='" + autor + '\'' +
                    ", rokWydania=" + rokWydania +
                    '}';
        }
    }
}



Zadanie 5

public class Zadanie5 {
    public static void main(String[] args) {
        Punkt2D punkt2D = new Punkt2D();
        Punkt2D punkt2Dv2 = new Punkt2D();

        Punkt2DKolor punkt2DKolor = new Punkt2DKolor();
        Punkt2DKolor punkt2DKolorv2 = new Punkt2DKolor();
    }

    static class Punkt2D {
        private int x;
        private int y;

        public Punkt2D(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public Punkt2D() {}
    }

    static class Punkt2DKolor extends Punkt2D {

        public Punkt2DKolor(int x, int y) {
            super(x, y);
        }

        public Punkt2DKolor() {}
    }
}

//Odpowiedz: Do poprawnego działania oby klas niezbędne są konstruktory domyślne oraz parametryczne.




Zadanie 6

import java.io.*;

public class Zadanie6 {

    public static void main(String[] args) {
        Ksiazka ksiazka = new Ksiazka("Miś uszatek", "Adam krzak", 1989);
        System.out.println(ksiazka);

        serialize(ksiazka, "ksiazka.ser");
        Ksiazka ksiazkaDes =  deserialize("ksiazka.ser");

        System.out.println(ksiazkaDes);
    }

    public static void serialize(Ksiazka ksiazka, String fN) {
        File file = new File(fN);
        try {
            ObjectOutputStream ks = new ObjectOutputStream(new FileOutputStream(file));
            System.out.println("Obiekt zapisany do " + file.getAbsolutePath());

            ks.writeObject(ksiazka);
            System.out.println(ksiazka);

        } catch (IOException ex) {
            ex.printStackTrace();
            System.out.println("Błąd");
        }
    }

    public static Ksiazka deserialize(String fN) {
        File file1 = new File(fN);
        Ksiazka ksiazka = null;
        try {
            ObjectInputStream is = new ObjectInputStream(new FileInputStream(file1));
            ksiazka = (Ksiazka) is.readObject();
        } catch (IOException | ClassNotFoundException ex) {

        }
        return ksiazka;
    }
}

class Ksiazka implements Comparable<Ksiazka>, Serializable {
    private String tytul;
    private String autor;
    private int rokWydania;

    public Ksiazka(String tytul, String autor, int rokWydania) {
        this.tytul = tytul;
        this.autor = autor;
        this.rokWydania = rokWydania;
    }

    public String getTytul() {
        return tytul;
    }

    @Override
    public String toString() {
        return "Ksiazka{" +
                "tytul='" + tytul + '\'' +
                ", autor='" + autor + '\'' +
                ", rokWydania=" + rokWydania +
                '}';
    }

    @Override
    public int compareTo(Ksiazka o) {
        return this.getTytul().compareTo(o.getTytul());
    }
}



Zadanie 7

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Zadanie7 {

    public static void main(String[] args) {
        try {
            File file = new File("wejsciezadanie7.txt");
            Scanner in = new Scanner(file, "Cp1250");

            while (in.hasNextLine()) {
                System.out.println(in.nextLine());
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}



Zadanie8

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Zadanie8 {
    public static void main(String[] args) {
        try {
            List<Integer> list = new ArrayList<>();
            Scanner in = new Scanner(System.in);
            System.out.println("Podaj ilość liczb do wprowadzenia");
            int n = in.nextInt();

            System.out.println("Teraz podawaj liczby");
            for (int i = 0; i < n; i++) {
                list.add(in.nextInt());
            }
            double srednia = Algorytm.oblicz(list);
            System.out.println(srednia);
        } catch (Exception ex) {
            System.out.println("Została podana błędna dana");
        }
    }

    static class Algorytm {

        static double oblicz(List<Integer> list) {
            double sum = 0;
            for (int i = 0; i < list.size(); i++) {
                sum += list.get(i);
            }
            return (sum / list.size());
        }
    }
}